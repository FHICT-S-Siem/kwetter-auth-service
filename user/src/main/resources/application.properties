# Port
quarkus.http.port=8081

# datasource on localhost
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/auth_db
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=kwetter-login
quarkus.datasource.password=2147Cash

# hibernate configuration
# drop-and-create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.database.generation=update

# datasource on auth-service-database
#%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://kweet-service-database:5432/auth_db
#%prod.quarkus.datasource.db-kind=postgresql
#%prod.quarkus.datasource.username=postgres
#%prod.quarkus.datasource.password=mysecretpassword

#%prod.quarkus.hibernate-orm.database.generation=drop-and-create
#%prod.quarkus.hibernate-orm.database.generation.create-schemas=true
#%prod.quarkus.hibernate-orm.scripts.generation.create-target=auth_db.sql
#%prod.quarkus.hibernate-orm.database.default-catalog=postgresdb


# CORS options
quarkus.http.cors=true
quarkus.http.cors.origins=*

# Swagger-ui
quarkus.swagger-ui.enable=true
quarkus.swagger-ui.always-include=true

# Docker
quarkus.container-image.build=true
quarkus.container-image.group=user
quarkus.container-image.name=user

# JWT verification
mp.jwt.verify.issuer=user-jwt
mp.jwt.verify.publickey.location=../jwt/publicKey.pem

# RabbitMQ config
rabbitmq-host=localhost
rabbitmq-port=5672
rabbitmq-username=guest
rabbitmq-password=guest

mp.messaging.outgoing.user-channel.connector=smallrye-rabbitmq
mp.messaging.outgoing.user-channel.exchange.name=user-exchange
mp.messaging.outgoing.user-channel.queue.name=user-queue

mp.messaging.outgoing.user-channel.exchange.type=fanout
